/* tslint:disable */
/* eslint-disable */
/**
 * 短链平台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
} from '../models';

export interface SchemaDeletePostRequest {
    inlineObject1?: InlineObject1;
}

export interface SchemaIdGetRequest {
    id: string;
}

export interface SchemaSavePostRequest {
    inlineObject?: InlineObject;
}

export interface VisitLogNoGetRequest {
    no: string;
}

export interface VisitLogNoPageGetRequest {
    no: string;
    pageSize?: number;
    page?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 国家代码
     */
    async geoListGetRaw(): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/geo/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * 国家代码
     */
    async geoListGet(): Promise<InlineResponse2002> {
        const response = await this.geoListGetRaw();
        return await response.value();
    }

    /**
     * 删除配置
     */
    async schemaDeletePostRaw(requestParameters: SchemaDeletePostRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schema/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 删除配置
     */
    async schemaDeletePost(requestParameters: SchemaDeletePostRequest): Promise<InlineResponse2001> {
        const response = await this.schemaDeletePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * 通过id获取配置
     */
    async schemaIdGetRaw(requestParameters: SchemaIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling schemaIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schema/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 通过id获取配置
     */
    async schemaIdGet(requestParameters: SchemaIdGetRequest): Promise<InlineResponse2001> {
        const response = await this.schemaIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * 配置列表
     */
    async schemaListGetRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schema/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * 配置列表
     */
    async schemaListGet(): Promise<InlineResponse200> {
        const response = await this.schemaListGetRaw();
        return await response.value();
    }

    /**
     * 新增配置
     */
    async schemaSavePostRaw(requestParameters: SchemaSavePostRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schema/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 新增配置
     */
    async schemaSavePost(requestParameters: SchemaSavePostRequest): Promise<InlineResponse2001> {
        const response = await this.schemaSavePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * 查询访问记录列表
     */
    async visitLogNoGetRaw(requestParameters: VisitLogNoGetRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.no === null || requestParameters.no === undefined) {
            throw new runtime.RequiredError('no','Required parameter requestParameters.no was null or undefined when calling visitLogNoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/visit_log/{no}`.replace(`{${"no"}}`, encodeURIComponent(String(requestParameters.no))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * 查询访问记录列表
     */
    async visitLogNoGet(requestParameters: VisitLogNoGetRequest): Promise<InlineResponse2003> {
        const response = await this.visitLogNoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * 分页查询访问记录列表 
     */
    async visitLogNoPageGetRaw(requestParameters: VisitLogNoPageGetRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.no === null || requestParameters.no === undefined) {
            throw new runtime.RequiredError('no','Required parameter requestParameters.no was null or undefined when calling visitLogNoPageGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/visit_log/{no}/page`.replace(`{${"no"}}`, encodeURIComponent(String(requestParameters.no))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * 分页查询访问记录列表 
     */
    async visitLogNoPageGet(requestParameters: VisitLogNoPageGetRequest): Promise<InlineResponse2004> {
        const response = await this.visitLogNoPageGetRaw(requestParameters);
        return await response.value();
    }

}
